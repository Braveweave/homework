## 计算机科学的基本定义

通过几周的专业导论课，我对计算机科学这门学科有了更加全面、深刻的了解。


计算机科学是研究 **信息** 和 **计算** 的理论基础，以及它们在计算机系统上实现和
应用的实践技术。这说明了计算机科学的研究内容十分广泛，包括了计算机的设计、制造
和应用（即利用计算机进行信息获取、表示、存储、处理、控制等工作）的理论、方法以
及技术。


而什么是这门学科的核心研究问题呢？我们知道，计算机最早研发出来是用作计算导弹轨
道，减少大量人工计算操作的。其实这就告诉了我们计算机的两个最重要的用途：(1) 计
算；(2) 自动化处理。因此我们可以毫不犹豫的看到计算机科学研究的核心问题就是：
“如何 **自动化** 处理问题，以及什么样的问题不能被 **自动化**。”


另一方面，虽然计算机科学研究领域十分广阔，但是通过课程学习，我们也不难将这些前
沿研究划分为以下几个重要问题：

* 计算机原理

* 算法

* 数据结构

* 程序、程序语言以及程序设计方法论

* 软件

下面简单地介绍一下这几个核心问题。


* 计算机原理

计算机是这门学科所有研究对象的载体，通过研究这一部件的构成原理，可以解决许多基
础问题以及取得新的突破。


* 算法

算法是计算机学科的灵魂。算法是指一系列的解决问题的操作步骤。通过对算法的研究，
能使我们更加深刻地了解到问题的本质以及发掘到可能的求解方法。

算法具有以下的定义：

    - 非形式化定义
    - 有穷性
    - 确定性
    - 0 或多个输入
    - 1 或多个输出
    - 可行性


* 数据结构

如果说算法是灵魂，那么数据结构就是程序设计中的骨架。通过数据结构这一定性模型，
我们可以对客观、复杂的现实问题进行抽象化处理，简化问题的复杂度以及令问题更加
清晰具体。


而一个数据结构由三个部分组成：数据的逻辑结构、存储结构和运算。


* 程序、程序语言以及程序设计方法论

程序就是我们使用计算机进行解决问题的一系列的指令，代表了解决方法的步骤。正如
Nikiklaus Wirth 说的那样：

> 程序 = 算法 + 数据结构

一个程序是建立在算法和数据结构上的。那么程序设计其实就是指通过一系列的算法（解
决方案）对数据结构（问题的本体）进行“加工”，最终解决这个问题。而在这一个过程中
，就包含了许多不同的方法论、语言工具和计算环境。


* 软件

软件一般是指计算机系统中的程序及其文档。对软件的研究对象有：开发、维护方法；
程序本身涉及的理论和技术。


-----------

## 我对计算机学科体系的理解


通过上面的一系列分析不难看出，计算机科学是一门研究 **信息** 和 **计算方法** 的
科学，通过大量使用数学、物理等相关学科以及学科内的理论，对实际问题、信息进行
处理；同时为我们提供了 **自动化处理** 一系列具有相同特点问题的理论依据以及可行
方案。


而计算机科学研究对象可以概括为以下几部分：

* 计算理论 (theory of computation)
* 算法与数据结构 (algorithms and data structures)
* 编程方法与编程语言 (programming methodology and languages)
* 计算机元素和架构 (computer elements and architecutre)


同时，计算机科学还有以下两点不同于其他学科的特点：

1. 抽象性

通过隐藏细节等技巧来将具体问题形式化，降低问题的复杂度（排除与解决问题的无关
因素），从而只需清楚问题的定义以及方案即可用已有的知识解决。

2. 一般性

对一系列原子操作进行定义后，通过复用和组合来解决问题。


总的来说，可以用以下三个词来概括计算机科学这门学科：


**工程** 计算机科学是一门实际意义很强的学科。计算机学科通过虚拟的建模技术，将
现实世界的以一些条件归约(constraint)起来，从而得到更加简洁、通用的解决方案。


**科学** 计算机科学是一门严谨的科学。计算机科学是基于大量的数学、物理理论而建立
起来的；程序设计的过程也体现了人类的抽象推导过程。另外一个方面，计算机的发展也
对其他学科产生了许多重要的影响（例如定理自动化证明）。


**艺术** 虽然计算机真正意义上的发展历史还不足百年，但是在这段充满激情和奇迹的
历史中，逐步发展出许多不同的文化（黑客文化、开源文化等）。同时像词法、修辞、
逻辑、算术等人类特有的艺术文化，在计算机相关领域中（例如编程语言、递归）也有体
现出来，因此不难看出计算机科学其实也是人类思维活动的一个艺术产物。


--------------

## 专业学习要点


### 知识点

作为一个计算机科学专业的学生，在本科4年的学习中，有以下一些知识点需要掌握：

- 基础学科：

    * 高等数学
    * 离散数学
    * 线性代数
    * 英语

- 专业学科：

    * 程序设计
    * 算法与算法分析
    * 计算机组织及体系结构
    * 操作系统
    * 人机交互原理
    * 图形学、可视化计算
    * 人工智能
    * 信息理论
    * 数值计算

### 需要的能力

#### 抽象

将具体问题抽象化，是计算机科学一切“魔法”的源泉。现实的工程问题通常要对
复杂的问题进行建模，而这往往会带来很高的复杂度。而在计算机科学中，对于一个问题
，通常先要除去一些无关因素，将问题化归到已知领域中的某一类型问题。例如，处理像
肯德基这样的餐厅的排队最优问题（即怎样的队列才能使候餐时间最短），我们要先把眼光
放到有关这个问题的几个要素上：人流量、队列数量、平均等候速度、最小等候速度。通
过一系列的抽象，不难看出这其实是一个**优先队列**的问题；然后我们通过建立这一数
据结构，模拟这一行为（不一定要用模拟的方法），并找出最优算法；最后结合实际情况
来进行验证。从这个例子不难发现，抽象地处理问题有利于我们找到问题的本质。


#### 已知问题的一般化

对已知问题一般化就是使将已经知道的问题进行推广、同化，然后用来解决另一些具有相同
特点的问题。以这样的一个描述为例：

> 在两种可能里选择一个

我们可以将这个**操作**一般化成 if 操作（即选择结构），然后，当我们处理另外一个
**包含**有**选择**的问题时，就可以将 if 当作一个**可复用**的模块来完成操作。


#### 递归

计算机科学是一门研究**自动化处理问题**的学科，而**自动化处理**的一种重要的完成
方式就是**循环**。循环通常有两种：


1. 连续重复的同样的操作，例如录入一个年级学生的成绩。

2. 解决一个可分解的问题，而每个分解出来的子问题都和母问题具有相似性。


对于第二种问题，我们大脑很难，也不必去将处理整个问题的所有细节、具体步骤考虑进来，
只需要设立一套简单的对绝大部分子问题都适用的规则来进行求解，然后再把这些子问题
的解组合起来，就得到原问题的解。


以快速排序为例，将一个无序的列表按一定顺序排列起来就是排序问题要解决的“大”问题；
而这个“大”问题的一个小一点的子问题就是：以某一个值为基准，分别将列表中比这个值
小的元素和比这个值大的元素的两个子列表进行排序，最后将这三部分合并起来就可以得
到一个完整的按某种顺序排列的列表。


从上面的描述中，我们不难按照递归的一般步骤分离出几个关键操作：

* 以某一个值为基准 …… 两个子列表 （分割问题）
* 两个子列表都含有未排序的元素 （子问题和母问题相似）
* 对子列表进行排序 （套用相同的规则）
* 将三部分合并 （子问题的解组合起来）


综上可以看出递归思考这一能力将会给我们解决问题带来极大的便利。
